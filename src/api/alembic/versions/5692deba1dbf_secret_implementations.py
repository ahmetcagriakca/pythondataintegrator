"""secret_implementations

Revision ID: 5692deba1dbf
Revises: fe12dc8feb82
Create Date: 2021-02-20 21:26:34.946976

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '5692deba1dbf'
down_revision = 'fe12dc8feb82'
branch_labels = None
depends_on = None


def insert_secret_and_authentication_types():
    from models.dao.secret import SecretType, AuthenticationType
    from models.enums import SecretTypes, AuthenticationTypes
    bind = op.get_bind()
    from sqlalchemy import orm
    session = orm.Session(bind=bind)
    from sqlalchemy.sql import text

    secret_type_list = [
        {
            "Name": SecretTypes.Source.name,
        },
    ]
    authentication_type_list = [
        {
            "SecretType": SecretTypes.Source.name,
            "Name": AuthenticationTypes.BasicAuthentication.name,
        },
    ]
    secret_types = []
    for secret_type_json in secret_type_list:
        secret_type = SecretType(Name=secret_type_json["Name"])
        secret_types.append(secret_type)
    session.bulk_save_objects(secret_types)
    session.commit()
    authentication_types = []
    for authentication_type_json in authentication_type_list:
        secret_type = session.query(SecretType).filter_by(Name=authentication_type_json["SecretType"]).first()
        authentication_type = AuthenticationType(Name=authentication_type_json["Name"], SecretTypeId=secret_type.Id)
        authentication_types.append(authentication_type)
    session.bulk_save_objects(authentication_types)
    session.commit()


def insert_connection_database_to_secrets():
    from models.dao.connection import Connection, ConnectionSecret
    from models.dao.secret import Secret, SecretSource, AuthenticationType, SecretType, SecretSourceBasicAuthentication
    from models.enums import SecretTypes, AuthenticationTypes
    bind = op.get_bind()
    from sqlalchemy import orm
    session = orm.Session(bind=bind)
    connection_database_query = bind.execute('select c."Name",cd."User",cd."Password" from "Connection"."ConnectionDatabase" as cd join "Connection"."Connection" as c on c."Id" = cd."ConnectionId"')
    results = connection_database_query.fetchall()
    for connection_database in results:
        secret_type = session.query(SecretType).filter_by(Name=SecretTypes.Source.name).first()
        authentication_type = session.query(AuthenticationType).filter_by(
            Name=AuthenticationTypes.BasicAuthentication.name).first()
        secret = Secret(Name=connection_database[0], SecretType=secret_type)
        session.add(secret)
        secret_source = SecretSource(Secret=secret, AuthenticationType=authentication_type)
        session.add(secret_source)
        secret_source_basic_authentication = SecretSourceBasicAuthentication(User=connection_database[1],
                                                                             Password=connection_database[2],
                                                                             SecretSource=secret_source)
        session.add(secret_source_basic_authentication)
        connection = session.query(Connection).filter_by(Name=connection_database[0]).first()
        connection_secret = ConnectionSecret(Connection=connection, Secret=secret)
        session.add(connection_secret)

    session.commit()

def upgrade():
    op.execute('CREATE SCHEMA "Secret"')
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('SecretType',
    sa.Column('Id', sa.Integer(), nullable=False),
    sa.Column('Name', sa.String(length=100), nullable=False),
    sa.Column('CreatedByUserId', sa.Integer(), nullable=False),
    sa.Column('CreationDate', sa.DateTime(), nullable=False),
    sa.Column('LastUpdatedUserId', sa.Integer(), nullable=True),
    sa.Column('LastUpdatedDate', sa.DateTime(), nullable=True),
    sa.Column('IsDeleted', sa.Integer(), nullable=False),
    sa.Column('Comments', sa.String(length=1000), nullable=True),
    sa.Column('RowVersion', sa.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('Id'),
    sa.UniqueConstraint('Name'),
    schema='Secret'
    )
    op.create_table('AuthenticationType',
    sa.Column('Id', sa.Integer(), nullable=False),
    sa.Column('SecretTypeId', sa.Integer(), nullable=True),
    sa.Column('Name', sa.String(length=100), nullable=False),
    sa.Column('CreatedByUserId', sa.Integer(), nullable=False),
    sa.Column('CreationDate', sa.DateTime(), nullable=False),
    sa.Column('LastUpdatedUserId', sa.Integer(), nullable=True),
    sa.Column('LastUpdatedDate', sa.DateTime(), nullable=True),
    sa.Column('IsDeleted', sa.Integer(), nullable=False),
    sa.Column('Comments', sa.String(length=1000), nullable=True),
    sa.Column('RowVersion', sa.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['SecretTypeId'], ['Secret.SecretType.Id'], ),
    sa.PrimaryKeyConstraint('Id'),
    sa.UniqueConstraint('Name'),
    schema='Secret'
    )
    op.create_table('Secret',
    sa.Column('Id', sa.Integer(), nullable=False),
    sa.Column('SecretTypeId', sa.Integer(), nullable=True),
    sa.Column('Name', sa.String(length=100), nullable=False),
    sa.Column('CreatedByUserId', sa.Integer(), nullable=False),
    sa.Column('CreationDate', sa.DateTime(), nullable=False),
    sa.Column('LastUpdatedUserId', sa.Integer(), nullable=True),
    sa.Column('LastUpdatedDate', sa.DateTime(), nullable=True),
    sa.Column('IsDeleted', sa.Integer(), nullable=False),
    sa.Column('Comments', sa.String(length=1000), nullable=True),
    sa.Column('RowVersion', sa.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['SecretTypeId'], ['Secret.SecretType.Id'], ),
    sa.PrimaryKeyConstraint('Id'),
    schema='Secret'
    )
    op.create_index(op.f('ix_Secret_Secret_Name'), 'Secret', ['Name'], unique=False, schema='Secret')
    op.create_table('ConnectionFile',
    sa.Column('Id', sa.Integer(), nullable=False),
    sa.Column('ConnectionId', sa.Integer(), nullable=True),
    sa.Column('ConnectorTypeId', sa.Integer(), nullable=True),
    sa.Column('Folder', sa.String(length=100), nullable=True),
    sa.Column('CreatedByUserId', sa.Integer(), nullable=False),
    sa.Column('CreationDate', sa.DateTime(), nullable=False),
    sa.Column('LastUpdatedUserId', sa.Integer(), nullable=True),
    sa.Column('LastUpdatedDate', sa.DateTime(), nullable=True),
    sa.Column('IsDeleted', sa.Integer(), nullable=False),
    sa.Column('Comments', sa.String(length=1000), nullable=True),
    sa.Column('RowVersion', sa.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['ConnectionId'], ['Connection.Connection.Id'], ),
    sa.ForeignKeyConstraint(['ConnectorTypeId'], ['Connection.ConnectorType.Id'], ),
    sa.PrimaryKeyConstraint('Id'),
    schema='Connection'
    )
    op.create_table('ConnectionSecret',
    sa.Column('Id', sa.Integer(), nullable=False),
    sa.Column('ConnectionId', sa.Integer(), nullable=True),
    sa.Column('SecretId', sa.Integer(), nullable=True),
    sa.Column('CreatedByUserId', sa.Integer(), nullable=False),
    sa.Column('CreationDate', sa.DateTime(), nullable=False),
    sa.Column('LastUpdatedUserId', sa.Integer(), nullable=True),
    sa.Column('LastUpdatedDate', sa.DateTime(), nullable=True),
    sa.Column('IsDeleted', sa.Integer(), nullable=False),
    sa.Column('Comments', sa.String(length=1000), nullable=True),
    sa.Column('RowVersion', sa.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['ConnectionId'], ['Connection.Connection.Id'], ),
    sa.ForeignKeyConstraint(['SecretId'], ['Secret.Secret.Id'], ),
    sa.PrimaryKeyConstraint('Id'),
    schema='Connection'
    )
    op.create_table('SecretSource',
    sa.Column('Id', sa.Integer(), nullable=False),
    sa.Column('SecretId', sa.Integer(), nullable=True),
    sa.Column('AuthenticationTypeId', sa.Integer(), nullable=True),
    sa.Column('CreatedByUserId', sa.Integer(), nullable=False),
    sa.Column('CreationDate', sa.DateTime(), nullable=False),
    sa.Column('LastUpdatedUserId', sa.Integer(), nullable=True),
    sa.Column('LastUpdatedDate', sa.DateTime(), nullable=True),
    sa.Column('IsDeleted', sa.Integer(), nullable=False),
    sa.Column('Comments', sa.String(length=1000), nullable=True),
    sa.Column('RowVersion', sa.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['AuthenticationTypeId'], ['Secret.AuthenticationType.Id'], ),
    sa.ForeignKeyConstraint(['SecretId'], ['Secret.Secret.Id'], ),
    sa.PrimaryKeyConstraint('Id'),
    schema='Secret'
    )
    op.create_table('DataIntegrationConnectionFile',
    sa.Column('Id', sa.Integer(), nullable=False),
    sa.Column('DataIntegrationConnectionId', sa.Integer(), nullable=True),
    sa.Column('FileName', sa.String(length=1000), nullable=False),
    sa.Column('CreatedByUserId', sa.Integer(), nullable=False),
    sa.Column('CreationDate', sa.DateTime(), nullable=False),
    sa.Column('LastUpdatedUserId', sa.Integer(), nullable=True),
    sa.Column('LastUpdatedDate', sa.DateTime(), nullable=True),
    sa.Column('IsDeleted', sa.Integer(), nullable=False),
    sa.Column('Comments', sa.String(length=1000), nullable=True),
    sa.Column('RowVersion', sa.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['DataIntegrationConnectionId'], ['Integration.DataIntegrationConnection.Id'], ),
    sa.PrimaryKeyConstraint('Id'),
    schema='Integration'
    )
    op.create_table('SecretSourceBasicAuthentication',
    sa.Column('Id', sa.Integer(), nullable=False),
    sa.Column('SecretSourceId', sa.Integer(), nullable=True),
    sa.Column('User', sa.String(length=100), nullable=False),
    sa.Column('Password', sa.String(length=100), nullable=False),
    sa.Column('CreatedByUserId', sa.Integer(), nullable=False),
    sa.Column('CreationDate', sa.DateTime(), nullable=False),
    sa.Column('LastUpdatedUserId', sa.Integer(), nullable=True),
    sa.Column('LastUpdatedDate', sa.DateTime(), nullable=True),
    sa.Column('IsDeleted', sa.Integer(), nullable=False),
    sa.Column('Comments', sa.String(length=1000), nullable=True),
    sa.Column('RowVersion', sa.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['SecretSourceId'], ['Secret.SecretSource.Id'], ),
    sa.PrimaryKeyConstraint('Id'),
    schema='Secret'
    )
    insert_secret_and_authentication_types()
    insert_connection_database_to_secrets()
    op.drop_column('ConnectionDatabase', 'User', schema='Connection')
    op.drop_column('ConnectionDatabase', 'Password', schema='Connection')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('ConnectionDatabase', sa.Column('Password', sa.VARCHAR(length=100), autoincrement=False, nullable=True), schema='Connection')
    op.add_column('ConnectionDatabase', sa.Column('User', sa.VARCHAR(length=100), autoincrement=False, nullable=True), schema='Connection')
    op.drop_table('SecretSourceBasicAuthentication', schema='Secret')
    op.drop_table('DataIntegrationConnectionFile', schema='Integration')
    op.drop_table('SecretSource', schema='Secret')
    op.drop_table('ConnectionSecret', schema='Connection')
    op.drop_table('ConnectionFile', schema='Connection')
    op.drop_index(op.f('ix_Secret_Secret_Name'), table_name='Secret', schema='Secret')
    op.drop_table('Secret', schema='Secret')
    op.drop_table('AuthenticationType', schema='Secret')
    op.drop_table('SecretType', schema='Secret')
    # ### end Alembic commands ###
    op.execute('DROP SCHEMA "Secret"')

